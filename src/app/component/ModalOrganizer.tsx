"use client";
import React, { useState } from "react";

interface Member {
  name: string;
  role: "Sinh vi√™n" | "Gi·∫£ng vi√™n" | "Th√†nh vi√™n Ban t·ªï ch·ª©c" | "Tr∆∞·ªüng ban t·ªï ch·ª©c" | "Ph√≥ ban t·ªï ch·ª©c";
  email: string;
}

interface ModalOrganizerProps {
  onClose: () => void;
  userRole: "admin" | "ban t·ªï ch·ª©c" | "sinh vi√™n" | "gi·∫£ng vi√™n";
  currentUserEmail: string;
}

export default function ModalOrganizer({
  onClose,
  userRole,
  currentUserEmail,
}: ModalOrganizerProps) {
  const [tab, setTab] = useState<"all" | "student" | "teacher" | "organizer">("organizer");
  const [selectedRole, setSelectedRole] = useState<string>("");
  const [newMemberName, setNewMemberName] = useState<string>("");
  const [newMemberEmail, setNewMemberEmail] = useState<string>("");

  const members: Member[] = [
    { name: "Nguy·ªÖn VƒÉn A", role: "Th√†nh vi√™n Ban t·ªï ch·ª©c", email: "a@club.edu.vn" },
    { name: "Tr·∫ßn Th·ªã B", role: "Tr∆∞·ªüng ban t·ªï ch·ª©c", email: "b@club.edu.vn" },
    { name: "L√™ VƒÉn C", role: "Ph√≥ ban t·ªï ch·ª©c", email: "c@club.edu.vn" },
    { name: "Ng√¥ VƒÉn D", role: "Th√†nh vi√™n Ban t·ªï ch·ª©c", email: "d@club.edu.vn" },
  ];

  const filteredMembers = members.filter((member) => {
    if (tab === "organizer") {
      return (
        member.role === "Th√†nh vi√™n Ban t·ªï ch·ª©c" ||
        member.role === "Tr∆∞·ªüng ban t·ªï ch·ª©c" ||
        member.role === "Ph√≥ ban t·ªï ch·ª©c"
      );
    }
    return false;
  });

  const handleRoleChange = (email: string, newRole: string) => {
    if (confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën thay ƒë·ªïi vai tr√≤ c·ªßa ${email} th√†nh ${newRole}?`)) {
      console.log(`C·∫≠p nh·∫≠t vai tr√≤ c·ªßa ${email} th√†nh ${newRole}`);
    }
  };

  const handleAddMember = () => {
    if (newMemberName && newMemberEmail) {
      members.push({ name: newMemberName, role: "Th√†nh vi√™n Ban t·ªï ch·ª©c", email: newMemberEmail });
      setNewMemberName("");
      setNewMemberEmail("");
      alert("Th√™m th√†nh vi√™n th√†nh c√¥ng!");
    } else {
      alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.");
    }
  };

  const handleRemoveMember = (email: string) => {
    if (confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a th√†nh vi√™n ${email}?`)) {
      const index = members.findIndex((member) => member.email === email);
      if (index > -1) {
        members.splice(index, 1);
        alert("X√≥a th√†nh vi√™n th√†nh c√¥ng!");
      }
    }
  };

  const handleTransferLeadership = (email: string) => {
    if (confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën nh∆∞·ªùng quy·ªÅn Tr∆∞·ªüng ban cho ${email}?`)) {
      // Chuy·ªÉn quy·ªÅn tr∆∞·ªüng ban cho ng∆∞·ªùi kh√°c
      const memberIndex = members.findIndex((member) => member.email === email);
      if (memberIndex > -1) {
        members[memberIndex].role = "Tr∆∞·ªüng ban t·ªï ch·ª©c";
        alert(`Nh∆∞·ªùng quy·ªÅn tr∆∞·ªüng ban cho ${email} th√†nh c√¥ng!`);
      }
    }
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/60 bg-opacity-40">
      <div className="bg-white rounded-xl shadow-lg w-[90%] max-w-3xl p-6 flex flex-col justify-between max-h-[90vh]">
        {/* Header */}
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-2xl font-bold text-purple-600">Th√†nh vi√™n Ban t·ªï ch·ª©c</h2>
          <button
            onClick={onClose}
            className="text-red-500 text-xl font-bold cursor-pointer"
            title="ƒê√≥ng"
          >
            ‚úñ
          </button>
        </div>

        {/* Tabs */}
        <div className="flex gap-4 mb-4 border-b">
          <button
            onClick={() => setTab("organizer")}
            className={`pb-2 font-semibold cursor-pointer ${
              tab === "organizer" ? "border-b-2 border-purple-500 text-purple-600" : "text-gray-500"
            }`}
          >
            üìñ Ban t·ªï ch·ª©c
          </button>
        </div>

        {/* Members List */}
        <div className="space-y-2 overflow-y-auto flex-1 mb-6">
          {filteredMembers.length > 0 ? (
            filteredMembers.map((member, idx) => (
              <div
                key={idx}
                className="p-4 bg-gray-100 rounded-md shadow-sm border border-gray-300 flex justify-between items-center"
              >
                <div>
                  <h3 className="font-semibold text-lg">{member.name}</h3>
                  <p className="text-gray-600">üìß {member.email}</p>
                  <p className="text-sm text-gray-500">üîñ {member.role}</p>
                </div>

                {/* Action Buttons */}
                <div className="flex gap-2">
                  {(userRole === "admin" || userRole === "ban t·ªï ch·ª©c" || userRole === "Tr∆∞·ªüng ban t·ªï ch·ª©c") && (
                    <>
                      {userRole === "Tr∆∞·ªüng ban t·ªï ch·ª©c" && member.role !== "Tr∆∞·ªüng ban t·ªï ch·ª©c" && (
                        <button
                          onClick={() => handleTransferLeadership(member.email)}
                          className="text-blue-600 hover:underline text-sm"
                        >
                          üì¢ Nh∆∞·ªùng quy·ªÅn tr∆∞·ªüng ban
                        </button>
                      )}

                      {(userRole === "admin" || userRole === "Tr∆∞·ªüng ban t·ªï ch·ª©c") && (
                        <>
                          <button
                            onClick={() => handleRemoveMember(member.email)}
                            className="text-red-600 hover:underline text-sm"
                          >
                            ‚ùå X√≥a th√†nh vi√™n
                          </button>
                        </>
                      )}
                    </>
                  )}

                  {(userRole === "admin" || userRole === "Tr∆∞·ªüng ban t·ªï ch·ª©c") && (
                    <select
                      value={selectedRole}
                      onChange={(e) => setSelectedRole(e.target.value)}
                      className="border border-gray-300 rounded-md p-2 text-sm"
                    >
                      <option value="">Ch·ªçn vai tr√≤</option>
                      <option value="Tr∆∞·ªüng ban t·ªï ch·ª©c">Tr∆∞·ªüng ban t·ªï ch·ª©c</option>
                      <option value="Ph√≥ ban t·ªï ch·ª©c">Ph√≥ ban t·ªï ch·ª©c</option>
                      <option value="Th√†nh vi√™n Ban t·ªï ch·ª©c">Th√†nh vi√™n Ban t·ªï ch·ª©c</option>
                    </select>
                  )}

                  {(userRole === "admin" || userRole === "ban t·ªï ch·ª©c") && selectedRole && member.email !== currentUserEmail && (
                    <button
                      onClick={() => handleRoleChange(member.email, selectedRole)}
                      className="text-blue-600 hover:underline text-sm"
                    >
                      üì¢ Ph√¢n quy·ªÅn
                    </button>
                  )}
                </div>
              </div>
            ))
          ) : (
            <p className="text-gray-400 italic">Kh√¥ng c√≥ th√†nh vi√™n n√†o trong ban t·ªï ch·ª©c.</p>
          )}
        </div>

        {/* Add New Member */}
        {userRole === "Tr∆∞·ªüng ban t·ªï ch·ª©c" && (
          <div className="mt-4">
            <h3 className="font-semibold text-lg">Th√™m th√†nh vi√™n m·ªõi</h3>
            <input
              type="text"
              placeholder="T√™n th√†nh vi√™n"
              value={newMemberName}
              onChange={(e) => setNewMemberName(e.target.value)}
              className="border border-gray-300 p-2 rounded-md mb-2 w-full"
            />
            <input
              type="email"
              placeholder="Email th√†nh vi√™n"
              value={newMemberEmail}
              onChange={(e) => setNewMemberEmail(e.target.value)}
              className="border border-gray-300 p-2 rounded-md mb-4 w-full"
            />
            <button
              onClick={handleAddMember}
              className="bg-green-600 text-white p-2 rounded-md w-full"
            >
              Th√™m th√†nh vi√™n
            </button>
          </div>
        )}

        {/* Bottom button */}
        <div className="flex justify-end mt-4">
          <button
            onClick={onClose}
            className="cursor-pointer bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded-md"
          >
            ƒê√≥ng
          </button>
        </div>
      </div>
    </div>
  );
}
